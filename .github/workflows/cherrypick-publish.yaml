name: Cherry-pick Publish

on:
  issue_comment:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dbeilin-playground/nginx

jobs:
  check-comment:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/publish')
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
      branch_name: ${{ steps.check.outputs.branch_name }}
    steps:
    - name: Check if comment is /publish
      id: check
      run: |
        if [[ "${{ github.event.comment.body }}" == "/publish" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          # Get PR details
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               ${{ github.event.issue.pull_request.url }} > pr.json
          echo "pr_ref=$(jq -r .head.ref pr.json)" >> $GITHUB_OUTPUT
          echo "branch_name=$(jq -r .head.ref pr.json)" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi

  build-cherrypick:
    needs: check-comment
    if: needs.check-comment.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
    - name: React to comment
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          ${{ github.event.issue.comments_url }} \
          -d '{"body":"🍒 Cherry-pick build triggered! Building from branch `${{ needs.check-comment.outputs.branch_name }}`..."}'

    - name: Get PR details
      id: pr
      run: |
        curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             ${{ github.event.issue.pull_request.url }} > pr.json
        echo "head_sha=$(jq -r .head.sha pr.json)" >> $GITHUB_OUTPUT
        echo "head_ref=$(jq -r .head.ref pr.json)" >> $GITHUB_OUTPUT

    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.pr.outputs.head_sha }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate cherry-pick version
      id: version
      run: |
        BASE_VERSION="v1.0.$(date +%Y%m%d%H%M%S)-$(echo ${{ steps.pr.outputs.head_sha }} | cut -c1-7)"
        BRANCH_NAME="${{ steps.pr.outputs.head_ref }}"
        
        # Extract description from branch name if it follows cherrypick pattern
        if [[ "$BRANCH_NAME" == cherrypick/* ]]; then
          FIX_DESC=$(echo "$BRANCH_NAME" | sed 's/cherrypick\/prod-[0-9]*-//' | sed 's/cherrypick\///')
          VERSION="${BASE_VERSION}-cherrypick-${FIX_DESC}"
        else
          # If not following pattern, use branch name
          CLEAN_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g')
          VERSION="${BASE_VERSION}-cherrypick-${CLEAN_BRANCH}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Cherry-pick version: $VERSION"

    - name: Build and push Docker image (cherry-pick)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        target: production
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ steps.pr.outputs.head_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Docker image (cherry-pick pprof)
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        target: pprof
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-pprof
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          GIT_COMMIT=${{ steps.pr.outputs.head_sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Comment success
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          ${{ github.event.issue.comments_url }} \
          -d '{"body":"✅ Cherry-pick build completed!\n\n**Images:**\n- `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}`\n- `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-pprof`\n\n**Next Steps:**\n1. Check Kargo \"cherrypick\" project for new Freight\n2. Promote to CAND environment for testing\n3. After validation, promote to PROD environment"}'
